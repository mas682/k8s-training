apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: test-deployment
  name: test-deployment
spec:
  replicas: 2
  selector:
    matchLabels:
      app: test-deployment
  template:
    metadata:
      labels:
        app: test-deployment
    spec:
      containers:
      - image: localhost:5000/flask-docker-app:latest
        name: nginx
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 5000
        startupProbe:
          httpGet:
            path: /health
            port: 5000
          failureThreshold: 60
          periodSeconds: 1
        readinessProbe:
          httpGet:
            path: /health
            port: 5000
          periodSeconds: 1
          initialDelaySeconds: 30
        livenessProbe:
          httpGet:
            path: /health
            port: 5000
          periodSeconds: 1
          failureThreshold: 90
        env:
        # secret option 1: expose via environment variable
        - name: TEST_SECRET
          valueFrom:
            secretKeyRef: 
              name: my-secret
              key: key1
        # config option 1: add literally
        - name: LITERAL_SECRET
          value: surprise
        # config option 2: read from config map
        - name: CONFIGMAP_VALUE_1
          valueFrom:
            configMapKeyRef:
              name: my-config
              key: config1
        volumeMounts:
          # secert option 2: expose via a volume
          - name: secret-volume
            mountPath: /etc/secret-volume
            readOnly: true
          # config option 3: expose via a volume
          - name: config-volume
            mountPath: /etc/config
          - name: test-volume
            mountPath: /test
          - name: repo-volume
            mountPath: /repo
      initContainers:
        - name: init-test
          image: busybox:latest
          command: ['sh', '-c', 'for i in $(seq 0 10);do echo $i; sleep 1; done; echo The app is running!; echo We did it! > /test/output.txt']
          volumeMounts:
          - mountPath: /test
            name: test-volume
        - name: init-repo
          image: ubuntu:latest
          env:
          - name: REPO
            valueFrom:
              configMapKeyRef:
                name: git-config
                key: repo
          - name: USER
            valueFrom:
              configMapKeyRef:
                name: git-config
                key: username
          - name: DESTINATION
            valueFrom:
              configMapKeyRef:
                name: git-config
                key: destination
          - name: TOKEN
            valueFrom:
              secretKeyRef:
                name: git-creds
                key: token
          # command: ["/bin/sh", "-c", "git clone https://$USER:$TOKEN@github.com/$USER/$REPO.git $DESTINATION"]
          command:
          - bash
          - -c
          - |
            apt-get update && apt-get install -y git
            git clone https://$USER:$TOKEN@github.com/$USER/$REPO.git $DESTINATION
          volumeMounts:
            - mountPath: /repo
              name: repo-volume
        

      volumes:
        - name: secret-volume
          secret:
            secretName: my-secret
        - name: config-volume
          configMap:
            name: my-config  
        - name: test-volume
          emptyDir:
            sizeLimit: 500Mi
        - name: repo-volume
          emptyDir:
            sizeLimit: 500Mi
